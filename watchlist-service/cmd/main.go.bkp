package main

import (
    "context"
    "log"
    "net/http"
    "os"
    "os/signal"
    "syscall"
    "time"

    "movie-microservices/watchlist-service/internal/config"
    "movie-microservices/watchlist-service/internal/controllers"
    "movie-microservices/watchlist-service/internal/database"
    "movie-microservices/watchlist-service/internal/middleware"
    "movie-microservices/watchlist-service/internal/redis"
    "movie-microservices/watchlist-service/internal/repository"

    "github.com/gin-gonic/gin"
    "github.com/rs/zerolog"
    "github.com/rs/zerolog/log"
)

func main() {
    // Load configuration
    cfg, err := config.LoadConfig()
    if err != nil {
        log.Fatal().Err(err).Msg("Failed to load configuration")
    }

    // Initialize logger
    zerolog.TimeFieldFormat = zerolog.TimeFormatUnix
    log.Logger = zerolog.New(os.Stdout).With().Timestamp().Logger()

    if cfg.Environment == "development" {
        log.Logger = log.Logger.Output(zerolog.ConsoleWriter{Out: os.Stdout})
        zerolog.SetGlobalLevel(zerolog.DebugLevel)
    } else {
        zerolog.SetGlobalLevel(zerolog.InfoLevel)
    }

    // Connect to database
    db, err := database.Connect(cfg.Database)
    if err != nil {
        log.Fatal().Err(err).Msg("Failed to connect to database")
    }
    defer db.Close()

    // Run database migrations
    if err := database.RunMigrations(db); err != nil {
        log.Fatal().Err(err).Msg("Failed to run database migrations")
    }

    // Connect to Redis
    rdb := redis.Connect(cfg.Redis)
    defer rdb.Close()

    // Initialize repositories
    watchlistRepo := repository.NewWatchlistRepository(db)
    historyRepo := repository.NewHistoryRepository(db)

    // Initialize controllers
    watchlistController := controllers.NewWatchlistController(watchlistRepo, rdb)
    historyController := controllers.NewHistoryController(historyRepo, rdb)
    healthController := controllers.NewHealthController(db, rdb)

    // Setup Gin router
    if cfg.Environment == "production" {
        gin.SetMode(gin.ReleaseMode)
    }

    router := gin.Default()

    // Add middleware
    router.Use(middleware.Logger())
    router.Use(middleware.CORS())
    router.Use(middleware.RateLimiter())

    // Health check endpoints
    router.GET("/health", healthController.Health)
    router.GET("/ready", healthController.Ready)

    // API routes
    api := router.Group("/api")
    { 


        // Watchlist routes
        watchlist := api.Group("/watchlist")
        {
            watchlist.GET("", middleware.Authenticate(), watchlistController.GetWatchlist)
            watchlist.POST("", middleware.Authenticate(), watchlistController.AddToWatchlist)
            watchlist.DELETE("/:movieId", middleware.Authenticate(), watchlistController.RemoveFromWatchlist)
            watchlist.GET("/check/:movieId", middleware.Authenticate(), watchlistController.IsInWatchlist)
        }

        // History routes
        history := api.Group("/history")
        {
            history.GET("", middleware.Authenticate(), historyController.GetHistory)
            history.POST("", middleware.Authenticate(), historyController.AddToHistory)
            history.DELETE("/:movieId", middleware.Authenticate(), historyController.RemoveFromHistory)
        }
    }

    // Start server
    srv := &http.Server{
        Addr:    ":" + cfg.Port,
        Handler: router,
    }

    go func() {
        log.Info().Msgf("Starting watchlist service on port %s", cfg.Port)
        if err := srv.ListenAndServe(); err != nil && err != http.ErrServerClosed {
            log.Fatal().Err(err).Msg("Failed to start server")
        }
    }()

    // Wait for interrupt signal to gracefully shutdown the server
    quit := make(chan os.Signal, 1)
    signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
    <-quit
    log.Info().Msg("Shutting down server...")

    // Give outstanding requests a deadline for completion
    ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
    defer cancel()

    if err := srv.Shutdown(ctx); err != nil {
        log.Fatal().Err(err).Msg("Server forced to shutdown")
    }

    log.Info().Msg("Server exited")
}
