version: '3.8'

services:

  redis:
    image: redis:7-alpine
    container_name: redis
    hostname: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - app-network
    logging:
      driver: json-file
      options:
        max-size: 10m
        max-file: 3

  users-db:
    image: postgres:15-alpine
    container_name: users-db
    hostname: users-db
    environment:
      POSTGRES_DB: ${USERS_DB_NAME}
      POSTGRES_USER: ${USERS_DB_USER}
      POSTGRES_PASSWORD: ${USERS_DB_PASSWORD}
      TZ: "Asia/Dhaka"              # Time zone env added here
    ports:
      - "${USERS_DB_PORT}:5432"
    volumes:
      - users_db_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${USERS_DB_USER} -d ${USERS_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  movies-db:
    image: postgres:15-alpine
    container_name: movies-db
    hostname: movies-db
    environment:
      POSTGRES_DB: ${MOVIES_DB_NAME}
      POSTGRES_USER: ${MOVIES_DB_USER}
      POSTGRES_PASSWORD: ${MOVIES_DB_PASSWORD}
      TZ: "Asia/Dhaka"
    ports:
      - "${MOVIES_DB_PORT}:5432"
    volumes:
      - movies_db_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${MOVIES_DB_USER} -d ${MOVIES_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  ratings-db:
    image: postgres:15-alpine
    container_name: ratings-db
    hostname: ratings-db
    environment:
      POSTGRES_DB: ${RATINGS_DB_NAME}
      POSTGRES_USER: ${RATINGS_DB_USER}
      POSTGRES_PASSWORD: ${RATINGS_DB_PASSWORD}
      TZ: "Asia/Dhaka"
    ports:
      - "${RATINGS_DB_PORT}:5432"
    volumes:
      - ratings_db_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${RATINGS_DB_USER} -d ${RATINGS_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  watchlist-db:
    image: postgres:15-alpine
    container_name: watchlist-db
    hostname: watchlist-db
    environment:
      POSTGRES_DB: ${WATCHLIST_DB_NAME}
      POSTGRES_USER: ${WATCHLIST_DB_USER}
      POSTGRES_PASSWORD: ${WATCHLIST_DB_PASSWORD}
      TZ: "Asia/Dhaka"
    ports:
      - "${WATCHLIST_DB_PORT}:5432"
    volumes:
      - watchlist_db_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${WATCHLIST_DB_USER} -d ${WATCHLIST_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  notification-db:
    image: postgres:15-alpine
    container_name: notification-db
    hostname: notification-db
    environment:
      POSTGRES_DB: ${NOTIFICATION_DB_NAME}
      POSTGRES_USER: ${NOTIFICATION_DB_USER}
      POSTGRES_PASSWORD: ${NOTIFICATION_DB_PASSWORD}
      TZ: "Asia/Dhaka"
    ports:
      - "${NOTIFICATION_DB_PORT}:5432"
    volumes:
      - notification_db_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${NOTIFICATION_DB_USER} -d ${NOTIFICATION_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  cms-db:
    image: postgres:15-alpine
    container_name: cms-db
    hostname: cms-db
    environment:
      POSTGRES_DB: ${CMS_DB_NAME}
      POSTGRES_USER: ${CMS_DB_USER}
      POSTGRES_PASSWORD: ${CMS_DB_PASSWORD}
      TZ: "Asia/Dhaka"
    ports:
      - "${CMS_DB_PORT}:5432"
    volumes:
      - cms_db_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${CMS_DB_USER} -d ${CMS_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  recommendations-db:
    image: postgres:15-alpine
    container_name: recommendations-db
    hostname: recommendations-db
    environment:
      POSTGRES_DB: ${RECOMMENDATIONS_DB_NAME}
      POSTGRES_USER: ${RECOMMENDATIONS_DB_USER}
      POSTGRES_PASSWORD: ${RECOMMENDATIONS_DB_PASSWORD}
      TZ: "Asia/Dhaka"
    ports:
      - "${RECOMMENDATIONS_DB_PORT}:5432"
    volumes:
      - recommendations_db_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${RECOMMENDATIONS_DB_USER} -d ${RECOMMENDATIONS_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  api-gateway:
    build: ./api-gateway
    image: movie-microservices/api-gateway:latest
    container_name: api-gateway
    hostname: api-gateway
    depends_on:
      - redis
      - users-db
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      Jwt__Key: ${JWT_SECRET}
      Jwt__Issuer: movie-microservices
      Jwt__Audience: movie-microservices-clients
      Services__UserService: http://user-service:8080
      Services__MovieService: http://movie-service:3001
      Services__RecommendationService: http://recommendation-service:8000
      Services__RatingService: http://rating-service:3002
      Services__WatchlistService: http://watchlist-service:3003
      Services__NotificationService: http://notification-service:3004
      Services__CmsService: http://cms-service:8081
      TZ: "Asia/Dhaka"
#      DATE_FORMAT: "YYYY-MM-DD"
#      TIME_FORMAT: "HH:mm:ss"
    ports:
      - "8080:8080"
    restart: unless-stopped
    networks:
      - app-network
    logging:
      driver: json-file
      options:
        max-size: 10m
        max-file: 3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  user-service:
    build: ./user-service
    image: movie-microservices/user-service:latest
    container_name: user-service
    hostname: user-service
    depends_on:
      - users-db
      - redis
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ConnectionStrings__DefaultConnection: Host=users-db;Port=5432;Database=${USERS_DB_NAME};Username=${USERS_DB_USER};Password=${USERS_DB_PASSWORD}
      Jwt__Key: ${JWT_SECRET}
      Jwt__Issuer: movie-microservices
      Jwt__Audience: movie-microservices-clients
      Jwt__ExpirationMinutes: 60
      TZ: "Asia/Dhaka"
#      DATE_FORMAT: "YYYY-MM-DD"
#      TIME_FORMAT: "HH:mm:ss"
    ports:
      - "8082:8080"
    restart: unless-stopped
    networks:
      - app-network
    logging:
      driver: json-file
      options:
        max-size: 10m
        max-file: 3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  movie-service:
    build: ./movie-service
    image: movie-microservices/movie-service:latest
    container_name: movie-service
    hostname: movie-service
    depends_on:
      - movies-db
      - redis
    environment:
      NODE_ENV: development
      PORT: 3001
      MOVIES_DB_NAME: ${MOVIES_DB_NAME}
      MOVIES_DB_USER: ${MOVIES_DB_USER}
      MOVIES_DB_PASSWORD: ${MOVIES_DB_PASSWORD}
      MOVIES_DB_HOST: movies-db
      MOVIES_DB_PORT_INTERNAL: 5432
      REDIS_URL: ${REDIS_URL}
      TMDB_API_KEY: ${TMDB_API_KEY}
      LOG_LEVEL: info
      TZ: "Asia/Dhaka"
#      DATE_FORMAT: "YYYY-MM-DD"
#      TIME_FORMAT: "HH:mm:ss"
    ports:
      - "3001:3001"
    volumes:
      - ./movie-service/logs:/app/logs
    restart: unless-stopped
    networks:
      - app-network
    logging:
      driver: json-file
      options:
        max-size: 10m
        max-file: 3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  recommendation-service:
    build: ./recommendation-service
    image: movie-microservices/recommendation-service:latest
    container_name: recommendation-service
    hostname: recommendation-service
    depends_on:
      - recommendations-db
      - redis
    environment:
      DATABASE_URL: postgresql://${RECOMMENDATIONS_DB_USER}:${RECOMMENDATIONS_DB_PASSWORD}@recommendations-db:5432/${RECOMMENDATIONS_DB_NAME}
      REDIS_URL: ${REDIS_URL}
      USER_SERVICE_URL: http://user-service:8080
      MOVIE_SERVICE_URL: http://movie-service:3001
      RATING_SERVICE_URL: http://rating-service:3002
      JWT_SECRET: ${JWT_SECRET}
      LOG_LEVEL: info
      TZ: "Asia/Dhaka"
#      DATE_FORMAT: "YYYY-MM-DD"
#      TIME_FORMAT: "HH:mm:ss"
    ports:
      - "8000:8000"
    restart: unless-stopped
    networks:
      - app-network
    logging:
      driver: json-file
      options:
        max-size: 10m
        max-file: 3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  rating-service:
    build: ./rating-service
    image: movie-microservices/rating-service:latest
    container_name: rating-service
    hostname: rating-service
    depends_on:
      - ratings-db
      - redis
    environment:
      NODE_ENV: development
      PORT: 3002
      RATINGS_DB_NAME: ${RATINGS_DB_NAME}
      RATINGS_DB_USER: ${RATINGS_DB_USER}
      RATINGS_DB_PASSWORD: ${RATINGS_DB_PASSWORD}
      RATINGS_DB_HOST: ratings-db
      RATINGS_DB_PORT_INTERNAL: 5432
      REDIS_URL: ${REDIS_URL}
      JWT_SECRET: ${JWT_SECRET}
      LOG_LEVEL: info
      TZ: "Asia/Dhaka"
#      DATE_FORMAT: "YYYY-MM-DD"
#     TIME_FORMAT: "HH:mm:ss"
    ports:
      - "3002:3002"
    volumes:
      - ./rating-service/logs:/app/logs
    restart: unless-stopped
    networks:
      - app-network
    logging:
      driver: json-file
      options:
        max-size: 10m
        max-file: 3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  watchlist-service:
    build: ./watchlist-service
    image: movie-microservices/watchlist-service:latest
    container_name: watchlist-service
    hostname: watchlist-service
    depends_on:
      - watchlist-db
      - redis
    environment:
      PORT: 3003
      ENVIRONMENT: development
      DATABASE_HOST: watchlist-db
      DATABASE_PORT: 5432
      DATABASE_USER: ${WATCHLIST_DB_USER}
      DATABASE_PASSWORD: ${WATCHLIST_DB_PASSWORD}
      DATABASE_DBNAME: ${WATCHLIST_DB_NAME}
      DATABASE_SSLMODE: disable
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD:
      REDIS_DB: 0
      JWT_SECRET: ${JWT_SECRET}
      TZ: "Asia/Dhaka"
#      DATE_FORMAT: "YYYY-MM-DD"
#      TIME_FORMAT: "HH:mm:ss"
    ports:
      - "3003:3003"
    restart: unless-stopped
    networks:
      - app-network
    logging:
      driver: json-file
      options:
        max-size: 10m
        max-file: 3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  notification-service:
    build: ./notification-service
    image: movie-microservices/notification-service:latest
    container_name: notification-service
    hostname: notification-service
    depends_on:
      - notification-db
      - redis
    environment:
      PORT: 3004
      ENVIRONMENT: development
      DATABASE_HOST: notification-db
      DATABASE_PORT: 5432
      DATABASE_USER: ${NOTIFICATION_DB_USER}
      DATABASE_PASSWORD: ${NOTIFICATION_DB_PASSWORD}
      DATABASE_DBNAME: ${NOTIFICATION_DB_NAME}
      DATABASE_SSLMODE: disable
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD:
      REDIS_DB: 0
      JWT_SECRET: ${JWT_SECRET}
      EMAIL_PROVIDER: sendgrid
      EMAIL_API_KEY: ${SENDGRID_API_KEY}
      EMAIL_FROM_EMAIL: noreply@movie-microservices.com
      EMAIL_FROM_NAME: Movie Microservices
      PUSH_PROVIDER: fcm
      PUSH_API_KEY: ${FCM_API_KEY}
      PUSH_AUTH_TOKEN: ${FCM_AUTH_TOKEN}
      TZ: "Asia/Dhaka"
#      DATE_FORMAT: "YYYY-MM-DD"
#      TIME_FORMAT: "HH:mm:ss"
    ports:
      - "3004:3004"
    restart: unless-stopped
    networks:
      - app-network
    logging:
      driver: json-file
      options:
        max-size: 10m
        max-file: 3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  cms-service:
    build: ./cms-service
    image: movie-microservices/cms-service:latest
    container_name: cms-service
    hostname: cms-service
    depends_on:
      - cms-db
      - redis
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ConnectionStrings__DefaultConnection: Host=cms-db;Port=5432;Database=${CMS_DB_NAME};Username=${CMS_DB_USER};Password=${CMS_DB_PASSWORD}
      Jwt__Key: ${JWT_SECRET}
      Jwt__Issuer: movie-microservices
      Jwt__Audience: movie-microservices-clients
      TZ: "Asia/Dhaka"
#      DATE_FORMAT: "YYYY-MM-DD"
#      TIME_FORMAT: "HH:mm:ss"
    ports:
      - "8081:8080"
    restart: unless-stopped
    networks:
      - app-network
    logging:
      driver: json-file
      options:
        max-size: 10m
        max-file: 3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  app-network:
    driver: bridge

volumes:
  redis_data:
  users_db_data:
  movies_db_data:
  ratings_db_data:
  watchlist_db_data:
  notification_db_data:
  cms_db_data:
  recommendations_db_data:

